/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.reloj_cronometro;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.TimerTask;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author carlo
 */
public class Reloj_Crono extends javax.swing.JFrame {

    /**
     * Creates new form Reloj_Crono
     */
    
    /*
    * Creamos las varibles a utilizar
    */
    Listas listas;
    Funciones_Reloj_crono FRC;
    Boolean inicio_crono = false; 
    Boolean Pausa = false;
    int segundos = 0;
    Boolean hay_alarma = false;
    int contador_alarmas;
    
    /*
    * Ocultamos todo lo relacionado a cronometro y las listas
    * y ponemos los textos por defecto
    */
    public Reloj_Crono() {
        initComponents();
        Panel_crono.setVisible(false);
        Inicio_crono.setVisible(false);
        Pausa_crono.setVisible(false);
        Panel_lista_alarma.setVisible(false);
        Panel_lista_crono.setVisible(false);
        añadir_lista.setText("Añadir alarma");
        Cambiar.setText("Cronometro");
        Crono.setText("00:00:00");
        listas = new Listas();
        FRC = new Funciones_Reloj_crono();
    }
    /*
    * funcion para comprobar las alarmas agregadas y mostrar un aviso cuando sea necesario
    */
    public void comprobar_alarma(){     
        String la = "";
        for (int i = 0; i < contador_alarmas; i++) {
            la = listas.getListModel_alarma().getElementAt(i) + "";
            if(la.equals(Reloj.getText())){
                JOptionPane.showMessageDialog(null, "Ya son las " + Reloj.getText()  , "Alarma", JOptionPane.PLAIN_MESSAGE);
                listas.borrarUnoListaAlarmas(i);
                contador_alarmas = contador_alarmas - 1;
            }
        }
    }
    /*
    * funcion para actualizar los segundos que pasan por el cronometro
    */
    public void segundos_crono(){
        segundos++;
        Crono.setText(FRC.Actualizar_crono(segundos, inicio_crono));
        
    }
    
    public void Iniciar_reloj(){
        Reloj.setText(FRC.Actualizar_reloj()); 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel_principal = new javax.swing.JPanel();
        Cambiar = new javax.swing.JButton();
        Inicio_crono = new javax.swing.JButton();
        Pausa_crono = new javax.swing.JButton();
        añadir_lista = new javax.swing.JButton();
        Vista_cambiable = new javax.swing.JLayeredPane();
        Panel_reloj = new javax.swing.JPanel();
        Reloj = new javax.swing.JLabel();
        Panel_lista_alarma = new javax.swing.JScrollPane();
        lista_alarma = new javax.swing.JList<>();
        Panel_crono = new javax.swing.JPanel();
        Crono = new javax.swing.JLabel();
        Panel_lista_crono = new javax.swing.JScrollPane();
        lista_vueltas = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 400));

        Panel_principal.setMinimumSize(new java.awt.Dimension(403, 372));

        Cambiar.setText("Cambiar");
        Cambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CambiarActionPerformed(evt);
            }
        });

        Inicio_crono.setText("Iniciar");
        Inicio_crono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inicio_cronoActionPerformed(evt);
            }
        });

        Pausa_crono.setText("Pausa");
        Pausa_crono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pausa_cronoActionPerformed(evt);
            }
        });

        añadir_lista.setText("Añadir vuelta");
        añadir_lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                añadir_listaActionPerformed(evt);
            }
        });

        Panel_reloj.setBackground(new java.awt.Color(0, 0, 0));

        Reloj.setBackground(new java.awt.Color(0, 0, 0));
        Reloj.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 36)); // NOI18N
        Reloj.setForeground(new java.awt.Color(102, 255, 204));
        Reloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Reloj.setText("12:34:56");
        Reloj.setMinimumSize(new java.awt.Dimension(218, 280));

        lista_alarma.setBackground(new java.awt.Color(240, 240, 240));
        lista_alarma.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lista_alarma.setMinimumSize(new java.awt.Dimension(280, 93));
        Panel_lista_alarma.setViewportView(lista_alarma);

        javax.swing.GroupLayout Panel_relojLayout = new javax.swing.GroupLayout(Panel_reloj);
        Panel_reloj.setLayout(Panel_relojLayout);
        Panel_relojLayout.setHorizontalGroup(
            Panel_relojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_relojLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Reloj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panel_lista_alarma, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );
        Panel_relojLayout.setVerticalGroup(
            Panel_relojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_relojLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_relojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Reloj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel_lista_alarma, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                .addContainerGap())
        );

        Panel_crono.setBackground(new java.awt.Color(0, 0, 0));

        Crono.setBackground(new java.awt.Color(0, 0, 0));
        Crono.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 36)); // NOI18N
        Crono.setForeground(new java.awt.Color(102, 255, 204));
        Crono.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Crono.setText("Crono");
        Crono.setMinimumSize(new java.awt.Dimension(218, 280));

        Panel_lista_crono.setPreferredSize(new java.awt.Dimension(258, 180));

        lista_vueltas.setBackground(new java.awt.Color(240, 240, 240));
        lista_vueltas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Panel_lista_crono.setViewportView(lista_vueltas);

        javax.swing.GroupLayout Panel_cronoLayout = new javax.swing.GroupLayout(Panel_crono);
        Panel_crono.setLayout(Panel_cronoLayout);
        Panel_cronoLayout.setHorizontalGroup(
            Panel_cronoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_cronoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Crono, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Panel_lista_crono, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addContainerGap())
        );
        Panel_cronoLayout.setVerticalGroup(
            Panel_cronoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_cronoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_cronoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Panel_lista_crono, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(Crono, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                .addContainerGap())
        );

        Vista_cambiable.setLayer(Panel_reloj, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Vista_cambiable.setLayer(Panel_crono, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout Vista_cambiableLayout = new javax.swing.GroupLayout(Vista_cambiable);
        Vista_cambiable.setLayout(Vista_cambiableLayout);
        Vista_cambiableLayout.setHorizontalGroup(
            Vista_cambiableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_reloj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Vista_cambiableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Panel_crono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        Vista_cambiableLayout.setVerticalGroup(
            Vista_cambiableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_reloj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(Vista_cambiableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(Panel_crono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout Panel_principalLayout = new javax.swing.GroupLayout(Panel_principal);
        Panel_principal.setLayout(Panel_principalLayout);
        Panel_principalLayout.setHorizontalGroup(
            Panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Vista_cambiable)
            .addGroup(Panel_principalLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Cambiar, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Inicio_crono, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Pausa_crono, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(añadir_lista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        Panel_principalLayout.setVerticalGroup(
            Panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_principalLayout.createSequentialGroup()
                .addComponent(Vista_cambiable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(Panel_principalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Cambiar, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(Inicio_crono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Pausa_crono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(añadir_lista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel_principal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CambiarActionPerformed
        if(Cambiar.getText() == "Cronometro"){
        /*
        * Ocultamos el Reloj y cambiamos el boton para cambiar a reloj
        */
        Panel_reloj.setVisible(false);
        Cambiar.setText("Reloj");
        /*
        * Mostramos el cronometro y los botones que le corresponden
        * y cambiamos el boton de añadir a lista
        */
        Panel_crono.setVisible(true);
        Inicio_crono.setVisible(true);
        Pausa_crono.setVisible(true);
        añadir_lista.setText("Añadir vuelta");
        }else{
        /*
        * operacion inversa a la anterior       
        */
        Panel_reloj.setVisible(true);
        Cambiar.setText("Cronometro");

        Panel_crono.setVisible(false);
        Inicio_crono.setVisible(false);
        Pausa_crono.setVisible(false);
        añadir_lista.setText("Añadir alarma");
        }
    }//GEN-LAST:event_CambiarActionPerformed

    private void Pausa_cronoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pausa_cronoActionPerformed
        if(Pausa){
            Pausa = false;
            Pausa_crono.setText("Pausa");
        }else{
            Pausa = true;
            Pausa_crono.setText("Reanudar");
        }
    }//GEN-LAST:event_Pausa_cronoActionPerformed

    private void añadir_listaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_añadir_listaActionPerformed
        if(añadir_lista.getText() == "Añadir alarma"){
            /*
            * Lectura de la hora de ejecucucion de la alarma
            */
            String horaAlarma = JOptionPane.showInputDialog(null, "Introduzca la hora 00:00:00", "Añadir Alarma", JOptionPane.PLAIN_MESSAGE);
            //Asociar el modelo de lista al JList
            lista_alarma.setModel(listas.modeloAlarma(horaAlarma));        
            Panel_lista_alarma.setVisible(true);
            hay_alarma = true;
            contador_alarmas++;
        }else{
            /*
            * Lectura tiempo pasado cronometro
            */
            String vuelta = Crono.getText();
            //Asociar el modelo de lista al JList
            lista_vueltas.setModel(listas.modeloVueltas(vuelta));  
            Panel_lista_crono.setVisible(true);
        }
    }//GEN-LAST:event_añadir_listaActionPerformed

    private void Inicio_cronoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inicio_cronoActionPerformed
        /*
        * En caso que sea el boton inicio se inicia el crono a cero y si es
        * reiniciar devuelve todos los valores a los predetermonados
        */
        if(Inicio_crono.getText() == "Iniciar"){
            inicio_crono = true;
            Crono.setText(FRC.Actualizar_crono(0, inicio_crono));
            Inicio_crono.setText("Reiniciar");
        }else{
            inicio_crono = false;
            FRC.Actualizar_crono(0, inicio_crono);
            segundos = 0;
            Panel_lista_crono.setVisible(false);
            listas.borrarListaVueltas();
            Inicio_crono.setText("Iniciar");
            Crono.setText("0:0:0");
        }

    }//GEN-LAST:event_Inicio_cronoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reloj_Crono.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reloj_Crono.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reloj_Crono.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reloj_Crono.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Creamos un objeto de la ventana
                Reloj_Crono R_C = new Reloj_Crono();
                R_C.setVisible(true);
                
                /*
                *Creamos un Timer y una tarea en la que ponemos el incio del reloj
                *y comprobamos cada segundo si el cronometro esta activo o pausado
                */
                
                java.util.Timer timer = new java.util.Timer();
                TimerTask task = new TimerTask() {
                    @Override
                    public void run() {
                        R_C.Iniciar_reloj();
                        if(R_C.hay_alarma){
                            R_C.comprobar_alarma();
                        }
                        
                        
                        if(R_C.inicio_crono){ 
                            if(!R_C.Pausa){ 
                                R_C.segundos_crono();
                            }        
                        }
                    }
                };
                
                //Hace que el "número" del Timer aumente en 1 cada segundo
                timer.scheduleAtFixedRate(task, 0, 1000);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cambiar;
    private javax.swing.JLabel Crono;
    private javax.swing.JButton Inicio_crono;
    private javax.swing.JPanel Panel_crono;
    private javax.swing.JScrollPane Panel_lista_alarma;
    private javax.swing.JScrollPane Panel_lista_crono;
    private javax.swing.JPanel Panel_principal;
    private javax.swing.JPanel Panel_reloj;
    private javax.swing.JButton Pausa_crono;
    private javax.swing.JLabel Reloj;
    private javax.swing.JLayeredPane Vista_cambiable;
    private javax.swing.JButton añadir_lista;
    private javax.swing.JList<String> lista_alarma;
    private javax.swing.JList<String> lista_vueltas;
    // End of variables declaration//GEN-END:variables


}
